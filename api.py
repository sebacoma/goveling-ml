# api.py
from typing import List, Optional
from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import logging
from datetime import datetime
import time

from models.schemas import *
from settings import settings

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Goveling ML API",
    description="API de optimizaci√≥n de itinerarios con ML v2.2 - Con soporte para hoteles",
    version="2.2.0"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
async def health_check():
    """Health check b√°sico"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "2.2.0"
    }

@app.post("/api/v2/itinerary/generate-hybrid", response_model=ItineraryResponse, tags=["Hybrid Optimizer"])
async def generate_hybrid_itinerary_endpoint(request: ItineraryRequest):
    """
    üöÄ OPTIMIZADOR H√çBRIDO INTELIGENTE v2.2 - CON DETECCI√ìN AUTOM√ÅTICA DE HOTELES
    
    ‚ú® FUNCIONALIDADES NUEVAS:
    - üè® Detecci√≥n autom√°tica de hoteles/alojamientos como centroides
    - üöó Recomendaciones inteligentes de transporte 
    - üîç Modo autom√°tico: Con/Sin hoteles
    - ‚Ü©Ô∏è Completamente retrocompatible
    
    üìä CARACTER√çSTICAS T√âCNICAS:
    - üó∫Ô∏è Clustering geogr√°fico autom√°tico (agrupa lugares cercanos)
    - üè® Clustering basado en hoteles (si se proporcionan alojamientos)
    - ‚ö° Estimaci√≥n h√≠brida de tiempos (Haversine + Google Directions API)
    - üìÖ Programaci√≥n multi-d√≠a inteligente con horarios realistas
    - üéØ Optimizaci√≥n nearest neighbor dentro de clusters
    - üö∂‚Äç‚ôÇÔ∏èüöóüöå Recomendaciones autom√°ticas de transporte por tramo
    - ‚è∞ Respeto de horarios, buffers y tiempos de traslado
    - üí∞ Eficiente en costos (solo usa Google API cuando es necesario)
    
    üè® MODO HOTELES:
    - Env√≠a 'accommodations' con tus hoteles/alojamientos
    - Sistema agrupa lugares por proximidad a hoteles
    - Rutas optimizadas desde/hacia alojamientos
    - Informaci√≥n de hotel incluida en cada actividad
    
    üó∫Ô∏è MODO GEOGR√ÅFICO:
    - No env√≠es 'accommodations' o env√≠a lista vac√≠a
    - Comportamiento actual (clustering autom√°tico)
    - Mantiene toda la funcionalidad existente
    
    VENTAJAS:
    - Horarios m√°s realistas y precisos
    - Distribuci√≥n equilibrada entre d√≠as
    - Reducci√≥n de tiempo total de viaje
    - Agrupaci√≥n inteligente por zonas geogr√°ficas o hoteles
    - Recomendaciones de transporte personalizadas
    """
    from utils.analytics import analytics
    import time
    
    start_time = time.time()
    
    try:
        # üîç Detectar si se enviaron hoteles/alojamientos
        accommodations_data = None
        hotels_provided = False
        
        if request.accommodations:
            accommodations_data = [acc.dict() if hasattr(acc, 'dict') else acc 
                                 for acc in request.accommodations]
            hotels_provided = True
            
            analytics.track_request("hybrid_itinerary_with_hotels", {
                "places_count": len(request.places),
                "hotels_count": len(accommodations_data),
                "days_requested": (request.end_date - request.start_date).days + 1,
                "transport_mode": request.transport_mode
            })
            
            logging.info(f"üè® Detectados {len(accommodations_data)} hoteles - modo centroides")
        else:
            analytics.track_request("hybrid_itinerary_geographic", {
                "places_count": len(request.places),
                "days_requested": (request.end_date - request.start_date).days + 1,
                "transport_mode": request.transport_mode
            })
            
            logging.info("üó∫Ô∏è Modo clustering geogr√°fico autom√°tico")
        
        logging.info(f"üöÄ Iniciando optimizaci√≥n H√çBRIDA para {len(request.places)} lugares")
        logging.info(f"üìÖ Per√≠odo: {request.start_date} a {request.end_date} ({(request.end_date - request.start_date).days + 1} d√≠as)")
        
        # Convertir lugares a formato dict
        places_data = []
        for place in request.places:
            if hasattr(place, 'dict'):  # Es un objeto Pydantic
                place_dict = place.dict()
            else:
                place_dict = place
            places_data.append(place_dict)
        
        # Usar optimizador h√≠brido con detecci√≥n autom√°tica
        from utils.hybrid_optimizer import optimize_itinerary_hybrid
        from datetime import datetime
        
        # Convertir fechas
        if isinstance(request.start_date, str):
            start_date = datetime.strptime(request.start_date, '%Y-%m-%d')
        else:
            start_date = datetime.combine(request.start_date, datetime.min.time())
            
        if isinstance(request.end_date, str):
            end_date = datetime.strptime(request.end_date, '%Y-%m-%d')
        else:
            end_date = datetime.combine(request.end_date, datetime.min.time())
        
        # üöÄ OPTIMIZACI√ìN CON DETECCI√ìN AUTOM√ÅTICA
        optimization_result = await optimize_itinerary_hybrid(
            places_data,
            start_date,
            end_date,
            request.daily_start_hour,
            request.daily_end_hour,
            request.transport_mode,
            accommodations_data  # ‚Üê Detecci√≥n autom√°tica (puede ser None)
        )
        
        # Extraer datos del resultado de optimizaci√≥n
        days_data = optimization_result.get("days", [])
        
        # Contar actividades totales
        total_activities = sum(len(day.get("activities", [])) for day in days_data)
        
        # Calcular tiempo total de viaje
        total_travel_minutes = sum([
            day.get("travel_summary", {}).get("total_travel_time_s", 0) / 60
            for day in days_data
        ])
        
        # Determinar el modo de optimizaci√≥n usado
        optimization_mode = "hotel_centroid" if hotels_provided else "geographic_clustering"
        
        # Formatear respuesta inteligente basada en el modo usado
        base_recommendations = []
        
        if hotels_provided:
            base_recommendations.extend([
                "üè® Itinerario optimizado con hoteles como centroides",
                f"üìç {len(accommodations_data)} hotel(es) usado(s) como base",
                "‚ö° Rutas optimizadas desde/hacia alojamientos",
                "üöó Recomendaciones de transporte por tramo"
            ])
        else:
            base_recommendations.extend([
                "üó∫Ô∏è Itinerario optimizado con clustering geogr√°fico autom√°tico",
                "üìä Agrupaci√≥n inteligente por proximidad geogr√°fica"
            ])
            
        base_recommendations.extend([
            f"‚ö° M√©todo h√≠brido: Haversine + Google Directions API",
            f"üìÖ {total_activities} actividades distribuidas en {len(days_data)} d√≠as",
            f"üéØ Score de eficiencia: {optimization_result.get('optimization_metrics', {}).get('efficiency_score', 0.9):.1%}",
            f"üö∂‚Äç‚ôÇÔ∏è Tiempo total de viaje: {int(total_travel_minutes)} minutos"
        ])
        
        # Formatear respuesta para ItineraryResponse con informaci√≥n completa
        formatted_result = {
            "days": days_data,  # Ya viene en el formato correcto del hybrid optimizer
            "unassigned": [],   # El optimizador h√≠brido maneja todo inteligentemente
            "total_activities": total_activities,
            "total_travel_time_minutes": float(total_travel_minutes),
            "average_activities_per_day": round(total_activities / max(1, len(days_data)), 1),
            "generated_at": datetime.now().isoformat(),
            "model_version": "2.2.0-hybrid-hotels",
            "optimization_metrics": {
                "efficiency_score": optimization_result.get("optimization_metrics", {}).get("efficiency_score", 0.9),
                "total_distance_km": optimization_result.get("optimization_metrics", {}).get("total_distance_km", 0),
                "avg_travel_per_activity_min": round(total_travel_minutes / max(1, total_activities), 1),
                "google_maps_enhanced": bool(settings.GOOGLE_MAPS_API_KEY),
                # Nuevas m√©tricas para hoteles
                "optimization_mode": optimization_mode,
                "hotels_provided": hotels_provided,
                "hotels_count": len(accommodations_data) if accommodations_data else 0,
                "accommodation_based_clustering": hotels_provided,
                "geographic_clustering": not hotels_provided,
                "transport_recommendations": True
            },
            "recommendations": base_recommendations,
            "system_info": {
                "optimizer": "hybrid_intelligent_v2.2",
                "version": "2.2.0",
                "google_maps_api": bool(settings.GOOGLE_MAPS_API_KEY),
                "generated_at": datetime.now().isoformat(),
                # Nuevas caracter√≠sticas del sistema
                "auto_hotel_detection": True,
                "backward_compatible": True,
                "hotel_centroid_clustering": hotels_provided,
                "geographic_clustering": not hotels_provided,
                "transport_recommendations": True,
                "features": {
                    "geographic_clustering": True,
                    "hybrid_travel_times": True,
                    "multi_day_scheduling": True,
                    "nearest_neighbor_optimization": True,
                    "realistic_time_windows": True,
                    "hotel_centroid_clustering": hotels_provided,
                    "transport_recommendations": True,
                    "auto_detection": True
                }
            }
        }
        
        # Log success
        duration = time.time() - start_time
        analytics.track_request(f"hybrid_itinerary_{optimization_mode}_success", {
            "efficiency_score": optimization_result.get("optimization_metrics", {}).get("efficiency_score", 0.9),
            "total_activities": total_activities,
            "days_used": len(days_data),
            "processing_time_seconds": round(duration, 2),
            "optimization_mode": optimization_mode,
            "hotels_provided": hotels_provided,
            "hotels_count": len(accommodations_data) if accommodations_data else 0
        })
        
        if hotels_provided:
            logging.info(f"‚úÖ Optimizaci√≥n h√≠brida CON HOTELES completada en {duration:.2f}s")
            logging.info(f"üè® {len(accommodations_data)} hoteles usados como centroides")
        else:
            logging.info(f"‚úÖ Optimizaci√≥n h√≠brida GEOGR√ÅFICA completada en {duration:.2f}s")
            
        logging.info(f"üéØ Resultado: {total_activities} actividades, score {optimization_result.get('optimization_metrics', {}).get('efficiency_score', 0.9):.1%}")
        
        return ItineraryResponse(**formatted_result)
        
    except Exception as e:
        # Log error
        analytics.track_error("hybrid_itinerary_error", str(e), {
            "places_count": len(request.places),
            "error_type": type(e).__name__
        })
        
        logging.error(f"‚ùå Error generating hybrid itinerary: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"Error generating hybrid itinerary: {str(e)}"
        )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "api:app",
        host=getattr(settings, 'API_HOST', '0.0.0.0'),
        port=getattr(settings, 'API_PORT', 8000),
        reload=getattr(settings, 'DEBUG', True)
    )
